特性（Attribute）是用于在运行时传递程序中各种元素（比如类、方法、结构、枚举、组件等）的行为信息的声明性标签。
规定特性（Attribute）的语法如下：
[attribute(positional_parameters, name_parameter = value, ...)]
element

Net 框架提供了三种预定义特性：

AttributeUsage :
预定义特性 AttributeUsage 描述了如何使用一个自定义特性类。它规定了特性可应用到的项目的类型。
[AttributeUsage(AttributeTargets.Class |
AttributeTargets.Constructor |
AttributeTargets.Field |
AttributeTargets.Method |
AttributeTargets.Property, 
AllowMultiple = true)]

Conditional:
这个预定义特性标记了一个条件方法，其执行依赖于指定的预处理标识符。
[Conditional("DEBUG")]

Obsolete:
这个预定义特性标记了不应被使用的程序实体。它可以让通知编译器丢弃某个特定的目标元素。
[Obsolete(
   message
)]
[Obsolete(
   message,
   iserror
)]
参数 message，是一个字符串，描述项目为什么过时以及该替代使用什么。
参数 iserror，是一个布尔值。如果该值为 true，编译器应把该项目的使用当作一个错误。默认值是 false（编译器生成一个警告）。

创建自定义特性（Attribute）
四个步骤：
声明自定义特性
构建自定义特性
在目标程序元素上应用自定义特性
通过反射访问特性

自定义特性应派生自 System.Attribute 类
// 一个自定义特性 BugFix 被赋给类及其成员
[AttributeUsage(AttributeTargets.Class |
AttributeTargets.Constructor |
AttributeTargets.Field |
AttributeTargets.Method |
AttributeTargets.Property,
AllowMultiple = true)]

public class DeBugInfo : System.Attribute
{
  private int bugNo;
  private string developer;
  private string lastReview;
  public string message;

  public DeBugInfo(int bg, string dev, string d)
  {
      this.bugNo = bg;
      this.developer = dev;
      this.lastReview = d;
  }

  public int BugNo
  {
      get
      {
          return bugNo;
      }
  }
  public string Developer
  {
      get
      {
          return developer;
      }
  }
  public string LastReview
  {
      get
      {
          return lastReview;
      }
  }
  public string Message
  {
      get
      {
          return message;
      }
      set
      {
          message = value;
      }
  }
}
